name: xBuild OTX Server 2  
  
on: [push, pull_request]  
  
jobs:  
  build:  
    runs-on: windows-latest  
    steps:  
    - name: Checkout with submodules  
      uses: actions/checkout@v4  
      with:  
        submodules: recursive  
          
    - name: Setup MSBuild  
      uses: microsoft/setup-msbuild@v2  
        
    - name: Cache Boost  
      id: cache-boost  
      uses: actions/cache@v4  
      with:  
        path: C:\local\boost_1_84_0  
        key: boost-1.84.0-msvc-14.3-x64  
          
    - name: Install Boost  
      if: steps.cache-boost.outputs.cache-hit != 'true'  
      run: choco install boost-msvc-14.3 --version=1.84.0 -y  
        
    - name: Debug Directory Structure  
      run: |  
        Write-Host "Current directory:"  
        Get-Location  
        Write-Host "=== Root directory contents ==="  
        Get-ChildItem -Name  
        Write-Host "=== Looking for SDK and Lua files recursively ==="  
        Get-ChildItem -Recurse -Name | Where-Object { $_ -like "*lua*" -or $_ -like "*sdk*" -or $_ -like "*dll*" } | Sort-Object  
        Write-Host "=== Sources directory structure ==="  
        if (Test-Path "sources") {  
          Get-ChildItem sources -Recurse -Name | Sort-Object  
        } else {  
          Write-Host "Sources directory not found!"  
        }  
        Write-Host "=== Looking specifically for otx-windows-sdk ==="  
        if (Test-Path "sources/otx-windows-sdk") {  
          Write-Host "Found sources/otx-windows-sdk directory"  
          Get-ChildItem "sources/otx-windows-sdk" -Recurse -Name | Sort-Object  
        } else {  
          Write-Host "sources/otx-windows-sdk directory NOT found"  
        }  
        
    - name: Install Dependencies with vcpkg  
      run: |  
        Write-Host "Installing dependencies via vcpkg..."  
        git clone https://github.com/Microsoft/vcpkg.git  
        .\vcpkg\bootstrap-vcpkg.bat  
        .\vcpkg\vcpkg install lua:x64-windows libxml2:x64-windows openssl:x64-windows mysql-connector-cpp:x64-windows libiconv:x64-windows mpir:x64-windows --triplet x64-windows  
        Write-Host "vcpkg installation completed"  
          
    - name: Build  
      run: |  
        cd sources/msvc  
        msbuild TheOTXServer.vcxproj /p:Configuration=Release /p:Platform=x64 /m  
          
    - name: Verify Build  
      run: |  
        if (!(Test-Path "sources\msvc\x64\Release\TheOTXServer.exe")) {  
          throw "Build failed - executable not found"  
        }  
        Write-Host "Build successful - executable found"  
          
    - name: Package Release  
      run: |  
        mkdir dist  
        copy sources\msvc\x64\Release\TheOTXServer.exe dist\  
          
        # Tentar copiar DLLs do SDK primeiro, depois do vcpkg  
        $sdkDlls = @(  
          @{src="sources\otx-windows-sdk\lua\lib64\lua51.dll"; name="lua51.dll"},  
          @{src="sources\otx-windows-sdk\libxml2\lib64\libxml2.dll"; name="libxml2.dll"},  
          @{src="sources\otx-windows-sdk\mpir\lib64\mpir.dll"; name="mpir.dll"},  
          @{src="sources\otx-windows-sdk\mysql-connector-c\lib64\libmysql.dll"; name="libmysql.dll"},  
          @{src="sources\otx-windows-sdk\openssl\lib64\libeay32.dll"; name="libeay32.dll"},  
          @{src="sources\otx-windows-sdk\openssl\lib64\ssleay32.dll"; name="ssleay32.dll"},  
          @{src="sources\otx-windows-sdk\libiconv\lib64\iconv.dll"; name="iconv.dll"}  
        )  
          
        $vcpkgDlls = @(  
          @{src="vcpkg\installed\x64-windows\bin\lua51.dll"; name="lua51.dll"},  
          @{src="vcpkg\installed\x64-windows\bin\libxml2.dll"; name="libxml2.dll"},  
          @{src="vcpkg\installed\x64-windows\bin\mpir.dll"; name="mpir.dll"},  
          @{src="vcpkg\installed\x64-windows\bin\libmysql.dll"; name="libmysql.dll"},  
          @{src="vcpkg\installed\x64-windows\bin\libcrypto-3-x64.dll"; name="libcrypto-3-x64.dll"},  
          @{src="vcpkg\installed\x64-windows\bin\libssl-3-x64.dll"; name="libssl-3-x64.dll"},  
          @{src="vcpkg\installed\x64-windows\bin\iconv.dll"; name="iconv.dll"}  
        )  
          
        foreach ($dll in $sdkDlls) {  
          if (Test-Path $dll.src) {  
            Write-Host "Copying from SDK: $($dll.src)"  
            copy $dll.src dist\  
          } else {  
            Write-Host "SDK DLL not found: $($dll.src), trying vcpkg..."  
            $vcpkgDll = $vcpkgDlls | Where-Object { $_.name -eq $dll.name }  
            if ($vcpkgDll -and (Test-Path $vcpkgDll.src)) {  
              Write-Host "Copying from vcpkg: $($vcpkgDll.src)"  
              copy $vcpkgDll.src dist\  
            } else {  
              Write-Host "WARNING: $($dll.name) not found in SDK or vcpkg - skipping"  
            }  
          }  
        }  
          
        # Verificar se temos pelo menos algumas DLLs essenciais  
        $essentialDlls = @("lua51.dll", "libxml2.dll")  
        $foundEssential = 0  
        foreach ($essential in $essentialDlls) {  
          if (Test-Path "dist\$essential") {  
            $foundEssential++  
          }  
        }  
          
        if ($foundEssential -eq 0) {  
          Write-Host "WARNING: No essential DLLs found. Server may not run properly."  
        } else {  
          Write-Host "Found $foundEssential essential DLLs. Package should be functional."  
        }  
          
    - name: Upload Artifact  
      uses: actions/upload-artifact@v4  
      with:  
        name: otx-server-windows-x64  
        path: dist/
